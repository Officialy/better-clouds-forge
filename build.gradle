plugins {
	id 'idea'
	id 'net.minecraftforge.gradle' version '[6.0,6.2)'
	id 'maven-publish'
	id "com.modrinth.minotaur" version "2.+"
	id 'org.spongepowered.mixin' version '0.7.+'
}


sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17


base {
	archivesName = mod_id
}
version = project.mod_version
if(project.version_type != "RELEASE") {
	version += "-" + project.version_type
}
version += "+" + project.minecraft_version
if(project.version_type != "RELEASE") {
	version += "." + 'git rev-parse --short HEAD'.execute().text.trim()
}
group = project.mod_group_id

repositories {
	maven {
		name = "TerraformersMC"
		url = "https://maven.terraformersmc.com/releases/"
	}
	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven { url "https://maven.shedaniel.me/" }
	maven {
		name 'Xander Maven'
		url 'https://maven.isxander.dev/releases'
	}
}
minecraft {
	mappings channel: mapping_channel, version: mapping_version
	copyIdeResources = true
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')


	runs {
		client {
			workingDirectory project.file('run')
			property 'forge.logging.markers', 'REGISTRIES'
			property 'forge.logging.console.level', 'debug'
			property 'forge.enabledGameTestNamespaces', mod_id
			property 'mixin.env.remapRefMap', 'true'
			property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

			mods {
				"${mod_id}" {
					source sourceSets.main
				}
			}
		}
	}
}

mixin {
	add sourceSets.main, "betterclouds.refmap.json"

	config "betterclouds.mixins.json"
}

dependencies {
	minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
	implementation "dev.isxander.yacl:yet-another-config-lib-forge:${project.yacl_version}"

	annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

//	modCompileOnly "maven.modrinth:sodium-extra:${project.sodium_extra_version}"
//	modCompileOnly "maven.modrinth:iris:${project.iris_version}"
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

/*modrinth  { // Make sure it runs after build!
	def secrets = new Properties()

	file("./secrets.properties").withInputStream {
		stream -> secrets.load(stream)
	}

	// An environment property called MODRINTH that is your token, set via Gradle CLI, GitHub Actions, Idea Run Configuration, or other
	token = secrets.MODRINTH
	projectId = '5srFLIaK'
	versionNumber = "${project.mod_version}+${project.minecraft_version}-${project.version_type.substring(0, 1)}" // Will fail if Modrinth has this version already
	versionName = "${project.mod_version} for ${project.minecraft_version} ${project.version_type}"
	versionType = Enum.valueOf(com.modrinth.minotaur.request.VersionType.class, "${project.version_type}").name()
	// On fabric, use 'remapJar' instead of 'jar'
	uploadFile = remapJar  // This is the java jar task. If it can't find the jar, try 'jar.outputs.getFiles().asPath' in place of 'jar'
	gameVersions = ['1.20']
	loaders = ['fabric']
	dependencies { // A special DSL for creating dependencies
		// scope.type
		// The scope can be `required`, `optional`, `incompatible`, or `embedded`
		// The type can either be `project` or `version`
		required.project "fabric-api"
		required.version "1eAoo2KR" // yacl 3.0.0
		optional.project "sodium"
		optional.project "iris"
		optional.project "modmenu"
	}
}*/
